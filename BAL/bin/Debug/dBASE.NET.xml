<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dBASE.NET</name>
    </assembly>
    <members>
        <member name="T:dBASE.NET.DbfRecord">
            <summary>
            DbfRecord encapsulates a record in a .dbf file. It contains an array with
            data (as an Object) for each field.
            </summary>
        </member>
        <member name="M:dBASE.NET.DbfRecord.#ctor(System.Collections.Generic.List{dBASE.NET.DbfField})">
            <summary>
            Create an empty record.
            </summary>
        </member>
        <member name="T:dBASE.NET.DbfField">
            <summary>
            Encapsulates a field descriptor in a .dbf file.
            </summary>
        </member>
        <member name="P:dBASE.NET.DbfField.Name">
            <summary>
            Field name
            </summary>
        </member>
        <member name="P:dBASE.NET.DbfField.Type">
            <summary>
            Field type
            </summary>
        </member>
        <member name="P:dBASE.NET.DbfField.Length">
            <summary>
            Length of field in bytes
            </summary>
        </member>
        <member name="P:dBASE.NET.DbfField.DefaultValue">
            <summary>
            Default value to write.
            </summary>
        </member>
        <member name="T:dBASE.NET.DbfFieldType">
            <summary>
            Not all types are currently implemented.
            </summary>
        </member>
        <member name="T:dBASE.NET.DbfHeader">
            <summary>
            The DbfHeader is an abstract base class for headers of different
            flavors of dBASE files.
            </summary>
        </member>
        <member name="P:dBASE.NET.DbfHeader.Version">
            <summary>
            dBASE version
            </summary>
        </member>
        <member name="P:dBASE.NET.DbfHeader.LastUpdate">
            <summary>
            Date of last update.
            </summary>
        </member>
        <member name="P:dBASE.NET.DbfHeader.NumRecords">
            <summary>
            Number of records in the file.
            </summary>
        </member>
        <member name="P:dBASE.NET.DbfHeader.HeaderLength">
            <summary>
             Header length in bytes. The records start at this offset in the .dbf file.
            </summary>
        </member>
        <member name="P:dBASE.NET.DbfHeader.RecordLength">
            <summary>
            Record length in bytes.
            </summary>
        </member>
        <member name="M:dBASE.NET.DbfHeader.Read(System.IO.BinaryReader)">
            <summary>
            Read the .dbf file header from the specified reader.
            </summary>
        </member>
        <member name="M:dBASE.NET.DbfHeader.Write(System.IO.BinaryWriter,System.Collections.Generic.List{dBASE.NET.DbfField},System.Collections.Generic.List{dBASE.NET.DbfRecord})">
            <summary>
            Write a .dbf file header to the specified writer.
            </summary>
        </member>
        <member name="T:dBASE.NET.Dbf">
            <summary>
            The Dbf class encapsulated a dBASE table (.dbf) file, allowing
            reading from disk, writing to disk, enumerating fields and enumerating records.
            </summary>
        </member>
        <member name="M:dBASE.NET.Dbf.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:dBASE.NET.Dbf" />.
            </summary>
        </member>
        <member name="M:dBASE.NET.Dbf.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:dBASE.NET.Dbf" /> with custom encoding.
            </summary>
            <param name="encoding">Custom encoding.</param>
        </member>
        <member name="P:dBASE.NET.Dbf.Fields">
            <summary>
            The collection of <see cref="T:dBASE.NET.DbfField" /> that represent table header.
            </summary>
        </member>
        <member name="P:dBASE.NET.Dbf.Records">
            <summary>
            The collection of <see cref="T:dBASE.NET.DbfRecord" /> that contains table data.
            </summary>
        </member>
        <member name="P:dBASE.NET.Dbf.Encoding">
            <summary>
            The <see cref="T:System.Text.Encoding" /> class that corresponds to the specified code page.
            Default value is <see cref="P:System.Text.Encoding.ASCII" />
            </summary>
        </member>
        <member name="M:dBASE.NET.Dbf.CreateRecord">
            <summary>
            Creates a new <see cref="T:dBASE.NET.DbfRecord" /> with the same schema as the table.
            </summary>
            <returns>A <see cref="T:dBASE.NET.DbfRecord" /> with the same schema as the <see cref="T:System.Data.DataTable" />.</returns>
        </member>
        <member name="M:dBASE.NET.Dbf.Read(System.String)">
            <summary>
            Opens a DBF file, reads the contents that initialize the current instance, and then closes the file.
            </summary>
            <param name="path">The file to read.</param>
        </member>
        <member name="M:dBASE.NET.Dbf.Write(System.String,dBASE.NET.DbfVersion)">
            <summary>
            Creates a new file, writes the current instance to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to read.</param>
            <param name="version">The version <see cref="T:dBASE.NET.DbfVersion" />. If unknown specified, use current header version.</param>
        </member>
        <member name="M:dBASE.NET.Dbf.Write(System.IO.Stream,dBASE.NET.DbfVersion)">
            <summary>
            Creates writes the current instance to the specified stream.
            </summary>
            <param name="stream">The output stream.</param>
            <param name="version">The version <see cref="T:dBASE.NET.DbfVersion" />. If unknown specified, use current header version.</param>
        </member>
        <member name="M:dBASE.NET.Encoders.CharacterEncoder.Encode(dBASE.NET.DbfField,System.Object,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.CharacterEncoder.Decode(System.Byte[],System.Byte[],System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.CurrencyEncoder.Encode(dBASE.NET.DbfField,System.Object,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.CurrencyEncoder.Decode(System.Byte[],System.Byte[],System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.DateEncoder.Encode(dBASE.NET.DbfField,System.Object,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.DateEncoder.Decode(System.Byte[],System.Byte[],System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.DateTimeEncoder.Encode(dBASE.NET.DbfField,System.Object,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.DateTimeEncoder.DateToJulian(System.DateTime)">
            <summary>
            Convert a .NET DateTime structure to a Julian Day Number as long
            Implemented from pseudo code at http://en.wikipedia.org/wiki/Julian_day
            </summary>
        </member>
        <member name="M:dBASE.NET.Encoders.DateTimeEncoder.Decode(System.Byte[],System.Byte[],System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.DateTimeEncoder.JulianToDateTime(System.Int64)">
            <summary>
            Convert a Julian Date as long to a .NET DateTime structure
            Implemented from pseudo code at http://en.wikipedia.org/wiki/Julian_day
            </summary>
            <param name="julianDateAsLong">Julian Date to convert (days since 01/01/4713 BC)</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:dBASE.NET.Encoders.FloatEncoder.Encode(dBASE.NET.DbfField,System.Object,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.FloatEncoder.Decode(System.Byte[],System.Byte[],System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.IntegerEncoder.Encode(dBASE.NET.DbfField,System.Object,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.IntegerEncoder.Decode(System.Byte[],System.Byte[],System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.LogicalEncoder.Encode(dBASE.NET.DbfField,System.Object,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.LogicalEncoder.Decode(System.Byte[],System.Byte[],System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.MemoEncoder.Encode(dBASE.NET.DbfField,System.Object,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.MemoEncoder.Decode(System.Byte[],System.Byte[],System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.NullFlagsEncoder.Encode(dBASE.NET.DbfField,System.Object,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.NullFlagsEncoder.Decode(System.Byte[],System.Byte[],System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.NumericEncoder.Encode(dBASE.NET.DbfField,System.Object,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:dBASE.NET.Encoders.NumericEncoder.Decode(System.Byte[],System.Byte[],System.Text.Encoding)">
            <inheritdoc />
        </member>
    </members>
</doc>
